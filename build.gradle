buildscript {
	ext.kotlin_version = '1.+'

    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "${mc_version}-${mod_version_major}.${mod_version_api}.${mod_version_minor}.${mod_version_patch}"
group = "${group}.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8 // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "${mcp_mappings}"
    makeObfSourceJar = true // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
	maven {
		name "forgelin"
		url "http://mvn.rx14.co.uk/shadowfacts/"
	}
}

dependencies {
    compile group: "net.shadowfacts", name: "Forgelin", version: "${dep_forgelin_version}"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Create API library zip
task apiZip(type: Zip) {
    from(sourceSets.main.java) {
        include "**/api/**"
    }
	from(sourceSets.main.kotlin) {
        include "**/api/**"
    }
    classifier = 'api'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from sourceSets.main.kotlin
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives apiZip
    archives sourcesJar
}
