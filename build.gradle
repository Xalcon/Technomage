buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply from: 'gradle/nonnull.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "${mc_version}-${mod_version_major}.${mod_version_api}.${mod_version_minor}.${mod_version_patch}"
group = "${group}.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8 // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "${mcp_mappings}"
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replace '@VERSION@', project.version
    //replace '@BUILD_NUMBER@', getBuildNumber()
}

repositories {
    jcenter()
    maven {
        name 'JEI'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'Hwyla'
        url 'http://tehnut.info/maven'
    }
}

dependencies {
    runtime "mezz.jei:jei_${mc_version}:+"
    runtime "mcp.mobius.waila:Hwyla:+"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    includeEmptyDirs = false

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
    manifest {
        attributes 'FMLAT': "${modid}_at.cfg"
    }
}

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    includeEmptyDirs = false
}

// Create API library zip
task apiJar(type: Jar) {
	from(sourceSets.main.output) {
        include "**/api/**"
    }
    classifier = 'api'
    includeEmptyDirs = false
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
    includeEmptyDirs = false
}

artifacts {
    archives deobfJar
    archives apiJar
    archives sourcesJar
}
